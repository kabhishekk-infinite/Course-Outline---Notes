
### Role of CPU and Memory

**CPU (Central Processing Unit):**

The CPU, often referred to as the brain of the computer, is responsible for executing instructions from programs. Its main roles include:

1. **Instruction Fetching**: The CPU retrieves instructions from the computer's memory.
2. **Instruction Decoding**: It interprets the instructions and determines what actions are required.
3. **Instruction Execution**: The CPU performs the necessary operations, such as arithmetic calculations, data processing, and logical operations.
4. **Control**: It manages and coordinates the activities of all other hardware components within the system.
5. **Communication**: The CPU sends and receives data to and from memory, input/output devices, and other components.

**Memory:**

Memory, also known as RAM (Random Access Memory), is a critical component that stores data temporarily while the computer is running. Its main roles include:

1. **Data Storage**: Memory holds the data and instructions that the CPU needs while performing tasks. This includes active programs and the operating system.
2. **Speed**: Memory is much faster than storage devices like hard drives or SSDs, providing quick access to data and instructions.
3. **Volatility**: RAM is volatile, meaning it loses all stored information when the power is turned off. This is in contrast to non-volatile storage like hard drives or SSDs.
4. **Working Space**: It provides the workspace for the CPU to perform tasks, allowing for efficient multitasking and fast processing of data.

### Definitions

**CPU (Central Processing Unit):**
The CPU is the primary component of a computer that performs most of the processing inside a computer. It executes the instructions of a computer program by performing basic arithmetic, logical, control, and input/output (I/O) operations specified by the instructions.

**Memory (RAM - Random Access Memory):**
Memory, specifically RAM, is a type of computer memory that can be accessed randomly; any byte of memory can be accessed without touching the preceding bytes. RAM is the main place for storing instructions and data that are being processed by the CPU.


### Definition and Role of an Operating System (OS)

**Definition:**

An Operating System (OS) is system software that manages computer hardware and software resources and provides common services for computer programs. The OS is a crucial component of the system software in a computer system, as it enables the functioning of application software by managing and coordinating the hardware.

**Role of an Operating System:**

1. **Resource Management:**
   - **Processor Management**: The OS schedules processes for execution by the CPU. It handles process creation, scheduling, and termination, ensuring efficient CPU utilization.
   - **Memory Management**: It manages the computer's memory, allocating and deallocating memory space as needed by various programs, and ensuring that each process has enough memory to execute efficiently.
   - **Storage Management**: The OS manages data storage on disk drives, handling file systems, organizing files, and controlling access to data.

2. **User Interface:**
   - **Graphical User Interface (GUI)**: The OS provides a graphical interface with windows, icons, and menus that allow users to interact with the computer easily.
   - **Command-Line Interface (CLI)**: It also provides a command-line interface for advanced users who prefer to interact with the system using text commands.

3. **Process Management:**
   - The OS manages processes in a system, ensuring that each process gets the necessary resources and time to execute. It handles multitasking, process synchronization, and inter-process communication.

4. **File System Management:**
   - The OS organizes and manages files on storage devices, providing a hierarchical structure for data storage. It handles file creation, deletion, reading, writing, and access control.

5. **Device Management:**
   - The OS manages hardware devices, providing drivers and interfaces that allow software to interact with hardware components like printers, displays, keyboards, and network devices.

6. **Security and Access Control:**
   - The OS ensures system security by managing user accounts, passwords, and permissions. It controls access to system resources, preventing unauthorized access and protecting data integrity.

7. **Networking:**
   - The OS provides networking capabilities, allowing computers to connect and communicate over networks. It manages network connections, data transmission, and network services.

8. **Error Detection and Handling:**
   - The OS monitors the system for errors and takes appropriate actions to ensure smooth operation. It handles errors in hardware and software, providing mechanisms for recovery and logging error information.

In summary, the OS acts as an intermediary between users and the computer hardware, ensuring efficient, secure, and user-friendly operation of the computer system.


Machine Language:

Definition:
Machine language, or machine code, is the lowest-level programming language, consisting of binary code that the computer's central processing unit (CPU) can execute directly. It is composed of binary digits (0s and 1s) and is specific to a particular type of processor.

Characteristics:

Direct Execution: Instructions are executed directly by the CPU.
Processor-Specific: Different processors have different machine languages.
Low-Level: Operates directly on the hardware without any abstraction.
Difficult to Read/Write: Extremely challenging for humans to read and write due to its binary nature.

Assembly Language:

Definition:
Assembly language is a low-level programming language that uses human-readable mnemonics to represent machine language instructions. Each assembly language is specific to a particular CPU architecture and provides a more understandable way to write machine-level instructions.

Characteristics:

Mnemonics: Uses short, human-readable codes or mnemonics (like MOV, ADD, SUB) to represent machine instructions.
One-to-One Mapping: Each assembly instruction typically corresponds to a single machine language instruction.
Processor-Specific: Just like machine language, it is specific to a particular type of CPU.
Low-Level: Provides minimal abstraction from the hardware, giving precise control over the system.


Major programming Languages :

  a) procedural Lang: A sequence of statements or commands in an order to achieve desired output
    C, C++
    Java
    Pascal
    Basic

 b) Functional Programming Lang : It focuses on the output of a mathematical calculations and evaluations
     Scala
     Erlnag
     Elixir
     Python
     F#
     Haskell

 c) OOP programming Lang : Treats a program as a group of objects composed of data and program elements (attributes and methods)
     C++
     Java
     C#
     Python
     Ruby

d) Scripting Language: To automate repetitive tasks, manage dynamic content, and or support process in larger application
   PHP
   JavaScript
   Perl
   Bash
   Python
   Node.js


e) Logic Programming Lang : Instead of telling a computer what to do, here we express a series of facts and rules to instruct the computer to make decisions
   Prolog
   Absys
   Datalog
   Alma-0

f) Front End lang : is concerned about the user interface and experience of the software in terms of images, Text,colors, navigation etc
    Html
    CSS
    JavaScript
    React Js
    Angular

g) Back End lang: Deals with storage and manipulation of data(server side software). Do not interact directly with the user
   JavaScript
   PHP
   Java
   C#

h)  Domain-Specific Languages (DSLs):
Definition: DSLs are designed for a specific domain or problem set. They are tailored to solve particular problems efficiently within their specific context.
Examples: SQL (Structured Query Language) for databases, CSS (Cascading Style Sheets) for styling web pages.

i) Compiled vs. Interpreted Languages:
Compiled Languages: These languages are translated directly into machine code that the computer's processor can execute. Examples include C, C++, Java (compiled to bytecode), etc.
Interpreted Languages: These languages are executed line by line by an interpreter software at runtime, without needing a separate compilation step. Examples include Python, JavaScript, PHP, etc.


