Selection statements in C# are used to make decisions based on conditions. They allow you to control the flow of execution by executing different code blocks based on the outcome of conditions. The primary selection statements in C# are `if`, `else if`, `else`, and `switch`.

### `if` Statement

The `if` statement is used to execute a block of code if a specified condition is true.

```csharp
int number = 10;

if (number > 5)
{
    Console.WriteLine("Number is greater than 5.");
}
```

### `if-else` Statement

The `if-else` statement provides an alternative block of code to execute if the condition is false.

```csharp
int number = 3;

if (number > 5)
{
    Console.WriteLine("Number is greater than 5.");
}
else
{
    Console.WriteLine("Number is not greater than 5.");
}
```

### `else if` Statement

The `else if` statement allows you to test multiple conditions. If the first condition is false, it checks the next condition, and so on.

```csharp
int number = 7;

if (number > 10)
{
    Console.WriteLine("Number is greater than 10.");
}
else if (number > 5)
{
    Console.WriteLine("Number is greater than 5 but less than or equal to 10.");
}
else
{
    Console.WriteLine("Number is 5 or less.");
}
```

### `switch` Statement

The `switch` statement is used to select one of many code blocks to be executed. It's often used when you have multiple conditions based on the same variable.

```csharp
int day = 3;

switch (day)
{
    case 1:
        Console.WriteLine("Monday");
        break;
    case 2:
        Console.WriteLine("Tuesday");
        break;
    case 3:
        Console.WriteLine("Wednesday");
        break;
    case 4:
        Console.WriteLine("Thursday");
        break;
    case 5:
        Console.WriteLine("Friday");
        break;
    case 6:
        Console.WriteLine("Saturday");
        break;
    case 7:
        Console.WriteLine("Sunday");
        break;
    default:
        Console.WriteLine("Invalid day");
        break;
}
```

#### Example of Combining Selection Statements

You can combine these selection statements to create more complex decision-making logic. Here's an example of how you can use nested `if-else` statements with a `switch` statement:

```csharp
int age = 20;
bool isStudent = true;

if (age < 18)
{
    Console.WriteLine("You are a minor.");
}
else
{
    if (isStudent)
    {
        Console.WriteLine("You are an adult and a student.");
    }
    else
    {
        Console.WriteLine("You are an adult.");
    }

    switch (age)
    {
        case 18:
            Console.WriteLine("Just became an adult.");
            break;
        case 21:
            Console.WriteLine("You can legally drink in some countries.");
            break;
        default:
            Console.WriteLine("Enjoy your adulthood.");
            break;
    }
}
```

### Conclusion

Selection statements are fundamental in controlling the flow of execution in your C# programs. They allow your programs to make decisions and execute different code based on various conditions. Understanding how to use `if`, `else if`, `else`, and `switch` statements effectively is crucial for developing logical and dynamic applications.