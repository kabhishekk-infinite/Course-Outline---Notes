String handling in C# involves working with text using the `String` and `StringBuilder` classes. Hereâ€™s a detailed look at both classes and their methods and properties:

### 1. The `String` Class

The `String` class in C# is used for working with immutable sequences of characters. This means once a `String` object is created, it cannot be changed. Instead, any operation that modifies a string will create a new string object.

#### Key Methods and Properties of `String`

1. **Properties:**
   - `Length`: Gets the number of characters in the string.
   
   ```csharp
   string str = "Hello, World!";
   int length = str.Length; // 13
   ```

2. **Methods:**
   - `Contains(string value)`: Checks if the string contains a specified substring.
   
     ```csharp
     string str = "Hello, World!";
     bool containsWorld = str.Contains("World"); // true
     ```
   
   - `IndexOf(string value)`: Returns the zero-based index of the first occurrence of the specified substring.
   
     ```csharp
     int index = str.IndexOf("World"); // 7
     ```
   
   - `Substring(int startIndex, int length)`: Retrieves a substring from the string.
   
     ```csharp
     string substr = str.Substring(7, 5); // "World"
     ```
   
   - `Replace(string oldValue, string newValue)`: Replaces all occurrences of a specified substring with another substring.
   
     ```csharp
     string newStr = str.Replace("World", "C#"); // "Hello, C#!"
     ```
   
   - `ToUpper() / ToLower()`: Converts the string to uppercase or lowercase.
   
     ```csharp
     string upperStr = str.ToUpper(); // "HELLO, WORLD!"
     string lowerStr = str.ToLower(); // "hello, world!"
     ```
   
   - `Trim() / TrimStart() / TrimEnd()`: Removes whitespace from the beginning and/or end of the string.
   
     ```csharp
     string strWithSpaces = "  Hello, World!  ";
     string trimmedStr = strWithSpaces.Trim(); // "Hello, World!"
     ```

### 2. The `StringBuilder` Class

The `StringBuilder` class is used for working with mutable sequences of characters. It is more efficient than `String` for operations that involve frequent modifications to the string, such as appending, removing, or replacing characters.

#### Key Methods and Properties of `StringBuilder`

1. **Properties:**
   - `Length`: Gets or sets the number of characters in the current `StringBuilder` object.
   - `Capacity`: Gets or sets the number of characters that the current `StringBuilder` object can contain.

   ```csharp
   StringBuilder sb = new StringBuilder("Hello");
   int length = sb.Length; // 5
   int capacity = sb.Capacity; // initial capacity, e.g., 16
   ```

2. **Methods:**
   - `Append(string value)`: Appends the specified string to the end of the `StringBuilder` object.
   
     ```csharp
     sb.Append(", World!");
     // sb now contains "Hello, World!"
     ```
   
   - `Insert(int index, string value)`: Inserts the specified string at the specified index.
   
     ```csharp
     sb.Insert(5, ", C#");
     // sb now contains "Hello, C#, World!"
     ```
   
   - `Remove(int startIndex, int length)`: Removes a specified number of characters from the `StringBuilder` object.
   
     ```csharp
     sb.Remove(5, 4);
     // sb now contains "Hello World!"
     ```
   
   - `Replace(string oldValue, string newValue)`: Replaces all occurrences of a specified substring with another substring.
   
     ```csharp
     sb.Replace("World", "C#");
     // sb now contains "Hello, C#!"
     ```

